// Importar todas las funciones de configuraci√≥n espec√≠ficas para cada tipo de prueba
import { obtenerConfiguracionMedias } from './media.js';
import { obtenerConfiguracionVarianza } from './varianza.js';
import { obtenerConfiguracionChiCuadrado } from './chi2.js';
import { obtenerConfiguracionKolmogorov } from './ks.js';
import { obtenerConfiguracionRachas } from './racha.js';

export function obtenerConfiguracionGrafico(prueba, nums) {
    /**
     * PATR√ìN FACTORY - Funci√≥n factory que selecciona la configuraci√≥n
     * de gr√°fico apropiada seg√∫n el tipo de prueba estad√≠stica
     * 
     * @param {Object} prueba - Objeto JSON con resultados del test estad√≠stico
     * @param {Array} nums - Array de n√∫meros originales (solo usado para prueba de medias)
     * @returns {Object|null} Configuraci√≥n de Chart.js o null si no se reconoce el test
     * 
     * VENTAJAS DEL PATR√ìN FACTORY:
     * 1. Centralizaci√≥n: Un solo punto de entrada para todas las configuraciones
     * 2. Extensibilidad: F√°cil agregar nuevos tipos de prueba
     * 3. Mantenibilidad: Cada configuraci√≥n est√° en su propio archivo
     * 4. Consistencia: Interfaz uniforme para el cliente
     */

    // Switch basado en el campo 'test_name' del resultado de la prueba
    switch (prueba.test_name) {

        // PRUEBA DE MEDIAS
        case "Prueba de Medias":
            // Requiere tanto el resultado de la prueba como los n√∫meros originales
            // para graficar cada punto individual con sus l√≠mites de aceptaci√≥n
            return obtenerConfiguracionMedias(prueba, nums);

        // PRUEBA KOLMOGOROV-SMIRNOV  
        case "Prueba KS":
            // Solo necesita el resultado de la prueba (contiene intervals_data)
            // para comparar distribuciones acumuladas observadas vs esperadas
            return obtenerConfiguracionKolmogorov(prueba);

        // PRUEBA DE VARIANZA
        case "Prueba de Varianza":
            // Genera la distribuci√≥n chi-cuadrado te√≥rica y muestra d√≥nde
            // cae el estad√≠stico calculado respecto a los l√≠mites cr√≠ticos
            return obtenerConfiguracionVarianza(prueba);

        // PRUEBA CHI-CUADRADO
        case "Prueba Chi-Cuadrado":
            // Compara frecuencias observadas vs esperadas por intervalos
            // usando gr√°fico de barras + l√≠nea de referencia
            return obtenerConfiguracionChiCuadrado(prueba);

        // PRUEBA DE RACHAS
        case "Prueba de Rachas":
            // Muestra evoluci√≥n temporal de rachas acumuladas
            // comparando tendencia observada vs esperada con intervalo de confianza
            return obtenerConfiguracionRachas(prueba);

        // CASO DEFAULT - Tipo de prueba no reconocido
        default:
            // Retorna null para indicar que no hay configuraci√≥n disponible
            // El cliente debe manejar este caso (ej: mostrar mensaje de error)
            return null;
    }
}

/**
 * ¬øC√ìMO FUNCIONA ESTE SISTEMA?
 * 
 * FLUJO DE EJECUCI√ìN:
 * 1. El cliente tiene resultados de un test estad√≠stico
 * 2. Llama a obtenerConfiguracionGrafico(prueba, nums)
 * 3. La funci√≥n examina prueba.test_name para identificar el tipo
 * 4. Delega a la funci√≥n espec√≠fica correspondiente
 * 5. Retorna configuraci√≥n completa de Chart.js lista para usar
 * 
 * TIPOS DE VISUALIZACI√ìN POR PRUEBA:
 * 
 * üìä MEDIAS: Scatter plot con todos los puntos individuales + l√≠mites
 * üìà KOLMOGOROV: Barras agrupadas comparando distribuciones acumuladas  
 * üìâ VARIANZA: Curva de distribuci√≥n chi¬≤ + regi√≥n de aceptaci√≥n
 * üìä CHI-CUADRADO: Barras de frecuencias + l√≠nea de expectativa uniforme
 * üìà RACHAS: L√≠neas de evoluci√≥n temporal + √°rea de confianza
 * 
 * EXTENSIBILIDAD:
 * Para agregar una nueva prueba (ej: "Prueba de Anderson-Darling"):
 * 1. Crear archivo anderson.js con obtenerConfiguracionAnderson()
 * 2. Importar la funci√≥n al inicio de este archivo
 * 3. Agregar case "Prueba de Anderson-Darling" al switch
 * 
 * MANEJO DE ERRORES:
 * - Si test_name no coincide con ning√∫n case ‚Üí retorna null
 * - El cliente debe verificar el resultado y manejar el caso null apropiadamente
 * - Cada funci√≥n espec√≠fica debe manejar sus propios errores internos
 * 
 * DEPENDENCIAS:
 * - Cada funci√≥n espec√≠fica maneja sus propias dependencias (ej: jStat para varianza)
 * - Todas usan temaHibrido desde utils.js para consistencia visual
 * - Configuraciones optimizadas para Chart.js con opciones avanzadas
 */